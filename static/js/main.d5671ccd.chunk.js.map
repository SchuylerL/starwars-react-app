{"version":3,"sources":["Detail.js","List.js","App.js","serviceWorker.js","index.js"],"names":["hideDetails","window","location","callApi","res","a","axios","get","params","apikey","t","data","title","y","release_date","substring","omdb","crawl","opening_crawl","console","error","Detail","person","useState","personDetail","setPersonDetail","getPosters","details","posters","i","films","length","film","slice","personDetailVal","homeworld","startsWith","name","undefined","species","Array","isArray","vehicles","arr","response","push","starships","Promise","all","useEffect","key","className","id","onClick","src","alt","Object","keys","map","value","index","includes","url","href","Title","target","rel","Poster","links","List","people","domain","App","state","addEventListener","hash","setState","this","resultsAll","results","next","starwars","flat","find","React","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.d5671ccd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nfunction hideDetails() {\n  window.location = '#';\n}\n\nasync function callApi(res) {\n  try {\n    const omdb = await axios.get('https://www.omdbapi.com/', {\n      params: {\n        apikey: 764452 + 'e7',\n        t: res.data.title,\n        y: res.data.release_date.substring(0, 4),\n      },\n    });\n    omdb.data.crawl = res.data.opening_crawl;\n    return omdb.data;\n  } catch (err) {\n    console.error('There was a problem fetching:', err);\n  }\n}\n\nexport default function Detail({ person }) {\n  const [personDetail, setPersonDetail] = useState({});\n  const getPosters = async (details) => {\n    const posters = [];\n    for (let i = 0; i < details.films.length; i++) {\n      const film = details.films[i];\n      const res = await axios.get('https://' + film.slice(7));\n\n      let personDetailVal;\n      if (details.homeworld.startsWith('http://')) {\n        personDetailVal = await axios.get(\n          'https://' + details.homeworld.slice(7)\n        );\n        details.homeworld = personDetailVal.data.name;\n      }\n      if (details.species[0] !== undefined)\n        if (details.species[0].startsWith('http://')) {\n          personDetailVal = await axios.get(\n            'https://' + details.species[i].slice(7)\n          );\n          details.species = personDetailVal.data.name;\n        }\n      if (Array.isArray(details.vehicles)) {\n        let arr = [];\n        let response;\n        for (let i = 0; i < details.vehicles.length; i++) {\n          if (details.vehicles[0].startsWith('http://')) {\n            response = await axios.get(\n              'https://' + details.vehicles[i].slice(7)\n            );\n            arr.push(response.data.name);\n          }\n        }\n        if (response !== undefined) details.vehicles = arr;\n      }\n      if (Array.isArray(details.starships)) {\n        let arr = [];\n        let response;\n        for (let i = 0; i < details.starships.length; i++) {\n          if (details.starships[0].startsWith('http://')) {\n            response = await axios.get(\n              'https://' + details.starships[i].slice(7)\n            );\n            arr.push(response.data.name);\n          }\n        }\n        if (response !== undefined) details.starships = arr;\n      }\n\n      posters.push(callApi(res));\n    }\n\n    details.films = await Promise.all(posters);\n\n    setPersonDetail(details);\n  };\n\n  useEffect(() => {\n    const details = {};\n    for (let key in person) {\n      details[key] = person[key];\n    }\n\n    getPosters(details);\n  }, [person]);\n\n  return (\n    <div className=\"detailDiv\">\n      <div id=\"detailHeader\">\n        {personDetail.name === undefined ? (\n          <h2>Loading...</h2>\n        ) : (\n          <h2>Details for {personDetail.name}</h2>\n        )}\n        <button id=\"hideDetails\" onClick={hideDetails}>\n          <img id=\"trooper\" src=\"storm.jfif\" alt=\"stormtrooper\" />\n          Close\n        </button>\n      </div>\n      <div id=\"content\">\n        <ul>\n          {Object.keys(personDetail).map((value, index) => {\n            return (\n              <li className=\"detailsList\" key={index}>\n                {value}: {value.includes('films') ? <br /> : null}\n                {value.includes('films') ? (\n                  personDetail.films.map((url, index) => (\n                    <a\n                      href={`https://imdb.com/find?q=${url.Title}`}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      key={index + 1}\n                    >\n                      <img\n                        className=\"zoom\"\n                        src={url.Poster}\n                        title={url.Title}\n                        alt={url.Title}\n                      />\n                    </a>\n                  ))\n                ) : value.includes('vehicles') ||\n                  value.includes('starships') ? (\n                  personDetail[value].map((links, index) => (\n                    <ul key={index + 4}>\n                      <li className=\"liNada\" key={index + 2}>\n                        {links}\n                      </li>\n                    </ul>\n                  ))\n                ) : value.includes('url') ? (\n                  <a href={personDetail[value]} key={index + 3}>\n                    {personDetail[value]}\n                  </a>\n                ) : (\n                  personDetail[value]\n                )}\n              </li>\n            );\n          })}\n        </ul>\n        {/* {Object.keys(personDetail).map((value, index) => {\n          let randCrawl = Math.floor(\n            Math.random() * Math.floor(personDetail.films.length)\n          );\n          return (\n            <div>\n              <br />\n              {value.includes('films') ? (\n                <div className=\"crawlTitle\">\n                  {personDetail.films[randCrawl].Title}\n                  <br /> <br />\n                  <div className=\"marquee\">\n                    <div className=\"text\">\n                      {personDetail.films[randCrawl].crawl}\n                    </div>\n                  </div>\n                </div>\n              ) : null}\n            </div>\n          );\n        })} */}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\n\nexport default function List({ people }) {\n  return (\n    <div id=\"peopleList\">\n      <h2 id=\"titleHeader\">Star Wars Characters</h2>\n      <div id=\"content\">\n        <ul>\n          {people.map((person) => {\n            return (\n              <a id=\"namelist\" key={person.id} href={`#${person.id}`}>\n                <li id=\"namelistli\" key={person.id}>\n                  {person.name}\n                </li>\n              </a>\n            );\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport Detail from './Detail';\nimport List from './List';\n\nconst domain = 'https://swapi.dev/api/people/?page=';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      people: [],\n      id: null,\n    };\n  }\n  async componentDidMount() {\n    window.addEventListener('hashchange', () => {\n      const id = window.location.hash.slice(1) * 1;\n      this.setState({ id });\n    });\n    if (window.location.hash.length > 1) {\n      const id = window.location.hash.slice(1) * 1;\n      this.setState({ id });\n    }\n    try {\n      const resultsAll = [];\n      let res = await axios.get(`${domain}1`);\n      resultsAll.push(res.data.results);\n\n      for (let i = 2; res.data.next !== null; i++) {\n        res = await axios.get(`${domain}${i}`);\n        resultsAll.push(res.data.results);\n      }\n      const starwars = resultsAll.flat();\n\n      const people = [];\n      // for (let i = 0; i < starwars.length; i++) {\n      for (let i = 0; i < 22; i++) {\n        people[i] = starwars[i];\n        people[i].id = i + 1;\n      }\n      this.setState({ people });\n    } catch (err) {\n      console.error('There was a problem fetching people:', err);\n    }\n  }\n  render() {\n    const { people, id } = this.state;\n    const person = people.find((person) => person.id === id);\n    return (\n      <div className=\"container\">\n        <div id=\"content\">\n          {people.length === 0 ? <h2>Loading...</h2> : <List people={people} />}\n          {person ? <Detail person={person} /> : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}